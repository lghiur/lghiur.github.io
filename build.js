!function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(1)["default"],_componentsListJsList=__webpack_require__(2),_componentsListJsList2=_interopRequireDefault(_componentsListJsList);React.render(React.createElement("div",null,React.createElement(_componentsListJsList2["default"],null),React.createElement(_componentsListJsList2["default"],null)),document.body)},function(module,exports){"use strict";exports["default"]=function(obj){return obj&&obj.__esModule?obj:{"default":obj}},exports.__esModule=!0},function(module,exports,__webpack_require__){"use strict";var _get=__webpack_require__(3)["default"],_inherits=__webpack_require__(17)["default"],_createClass=__webpack_require__(28)["default"],_classCallCheck=__webpack_require__(31)["default"],_interopRequireDefault=__webpack_require__(1)["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _baseComponentJsBaseComponent=__webpack_require__(32),_baseComponentJsBaseComponent2=_interopRequireDefault(_baseComponentJsBaseComponent),_actionInputJsActionInput=__webpack_require__(33),_actionInputJsActionInput2=_interopRequireDefault(_actionInputJsActionInput),_listActions=__webpack_require__(36),_listActions2=_interopRequireDefault(_listActions),_listStore=__webpack_require__(37),_listStore2=_interopRequireDefault(_listStore),_componentsListItemJsListItem=__webpack_require__(38),_componentsListItemJsListItem2=_interopRequireDefault(_componentsListItemJsListItem),List=function(_BaseComponent){function List(props){_classCallCheck(this,List),_get(Object.getPrototypeOf(List.prototype),"constructor",this).call(this,props),this.state={listItems:_listStore2["default"].getList()},this._bind("addItem","onChange")}return _inherits(List,_BaseComponent),_createClass(List,[{key:"addItem",value:function(value){_listActions2["default"].addItem({id:this.state.listItems.length+1,content:value})}},{key:"onChange",value:function(list){this.setState({listItems:list})}},{key:"componentDidMount",value:function(){this.unsubscribe=_listStore2["default"].listen(this.onChange)}},{key:"componentWillUnmount",value:function(){this.unsubscribe()}},{key:"render",value:function(){var listItems=this.state.listItems;return React.createElement("div",null,React.createElement(_actionInputJsActionInput2["default"],{onSubmitCallback:this.addItem}),React.createElement("ul",null),listItems.map(function(item){return React.createElement(_componentsListItemJsListItem2["default"],{key:item.id,content:item.content})}))}}]),List}(_baseComponentJsBaseComponent2["default"]);exports["default"]=List,module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";var _Object$getOwnPropertyDescriptor=__webpack_require__(4)["default"];exports["default"]=function(_x,_x2,_x3){for(var _again=!0;_again;){var object=_x,property=_x2,receiver=_x3;desc=parent=getter=void 0,_again=!1,null===object&&(object=Function.prototype);var desc=_Object$getOwnPropertyDescriptor(object,property);if(void 0!==desc){if("value"in desc)return desc.value;var getter=desc.get;return void 0===getter?void 0:getter.call(receiver)}var parent=Object.getPrototypeOf(object);if(null===parent)return void 0;_x=parent,_x2=property,_x3=receiver,_again=!0}},exports.__esModule=!0},function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(5),__esModule:!0}},function(module,exports,__webpack_require__){var $=__webpack_require__(6);__webpack_require__(7),module.exports=function(it,key){return $.getDesc(it,key)}},function(module,exports){var $Object=Object;module.exports={create:$Object.create,getProto:$Object.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:$Object.getOwnPropertyDescriptor,setDesc:$Object.defineProperty,setDescs:$Object.defineProperties,getKeys:$Object.keys,getNames:$Object.getOwnPropertyNames,getSymbols:$Object.getOwnPropertySymbols,each:[].forEach}},function(module,exports,__webpack_require__){var toIObject=__webpack_require__(8);__webpack_require__(12)("getOwnPropertyDescriptor",function($getOwnPropertyDescriptor){return function(it,key){return $getOwnPropertyDescriptor(toIObject(it),key)}})},function(module,exports,__webpack_require__){var IObject=__webpack_require__(9),defined=__webpack_require__(11);module.exports=function(it){return IObject(defined(it))}},function(module,exports,__webpack_require__){var cof=__webpack_require__(10);module.exports=0 in Object("z")?Object:function(it){return"String"==cof(it)?it.split(""):Object(it)}},function(module,exports){var toString={}.toString;module.exports=function(it){return toString.call(it).slice(8,-1)}},function(module,exports){module.exports=function(it){if(void 0==it)throw TypeError("Can't call method on  "+it);return it}},function(module,exports,__webpack_require__){module.exports=function(KEY,exec){var $def=__webpack_require__(13),fn=(__webpack_require__(15).Object||{})[KEY]||Object[KEY],exp={};exp[KEY]=exec(fn),$def($def.S+$def.F*__webpack_require__(16)(function(){fn(1)}),"Object",exp)}},function(module,exports,__webpack_require__){var global=__webpack_require__(14),core=__webpack_require__(15),PROTOTYPE="prototype",ctx=function(fn,that){return function(){return fn.apply(that,arguments)}},$def=function(type,name,source){var key,own,out,exp,isGlobal=type&$def.G,isProto=type&$def.P,target=isGlobal?global:type&$def.S?global[name]:(global[name]||{})[PROTOTYPE],exports=isGlobal?core:core[name]||(core[name]={});isGlobal&&(source=name);for(key in source)own=!(type&$def.F)&&target&&key in target,own&&key in exports||(out=own?target[key]:source[key],isGlobal&&"function"!=typeof target[key]?exp=source[key]:type&$def.B&&own?exp=ctx(out,global):type&$def.W&&target[key]==out?!function(C){exp=function(param){return this instanceof C?new C(param):C(param)},exp[PROTOTYPE]=C[PROTOTYPE]}(out):exp=isProto&&"function"==typeof out?ctx(Function.call,out):out,exports[key]=exp,isProto&&((exports[PROTOTYPE]||(exports[PROTOTYPE]={}))[key]=out))};$def.F=1,$def.G=2,$def.S=4,$def.P=8,$def.B=16,$def.W=32,module.exports=$def},function(module,exports){var UNDEFINED="undefined",global=module.exports=typeof window!=UNDEFINED&&window.Math==Math?window:typeof self!=UNDEFINED&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=global)},function(module,exports){var core=module.exports={};"number"==typeof __e&&(__e=core)},function(module,exports){module.exports=function(exec){try{return!!exec()}catch(e){return!0}}},function(module,exports,__webpack_require__){"use strict";var _Object$create=__webpack_require__(18)["default"],_Object$setPrototypeOf=__webpack_require__(20)["default"];exports["default"]=function(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=_Object$create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(_Object$setPrototypeOf?_Object$setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)},exports.__esModule=!0},function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(19),__esModule:!0}},function(module,exports,__webpack_require__){var $=__webpack_require__(6);module.exports=function(P,D){return $.create(P,D)}},function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(21),__esModule:!0}},function(module,exports,__webpack_require__){__webpack_require__(22),module.exports=__webpack_require__(15).Object.setPrototypeOf},function(module,exports,__webpack_require__){var $def=__webpack_require__(13);$def($def.S,"Object",{setPrototypeOf:__webpack_require__(23).set})},function(module,exports,__webpack_require__){var getDesc=__webpack_require__(6).getDesc,isObject=__webpack_require__(24),anObject=__webpack_require__(25),check=function(O,proto){if(anObject(O),!isObject(proto)&&null!==proto)throw TypeError(proto+": can't set as prototype!")};module.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(buggy,set){try{set=__webpack_require__(26)(Function.call,getDesc(Object.prototype,"__proto__").set,2),set({},[])}catch(e){buggy=!0}return function(O,proto){return check(O,proto),buggy?O.__proto__=proto:set(O,proto),O}}():void 0),check:check}},function(module,exports){module.exports=function(it){return null!==it&&("object"==typeof it||"function"==typeof it)}},function(module,exports,__webpack_require__){var isObject=__webpack_require__(24);module.exports=function(it){if(!isObject(it))throw TypeError(it+" is not an object!");return it}},function(module,exports,__webpack_require__){var aFunction=__webpack_require__(27);module.exports=function(fn,that,length){if(aFunction(fn),void 0===that)return fn;switch(length){case 1:return function(a){return fn.call(that,a)};case 2:return function(a,b){return fn.call(that,a,b)};case 3:return function(a,b,c){return fn.call(that,a,b,c)}}return function(){return fn.apply(that,arguments)}}},function(module,exports){module.exports=function(it){if("function"!=typeof it)throw TypeError(it+" is not a function!");return it}},function(module,exports,__webpack_require__){"use strict";var _Object$defineProperty=__webpack_require__(29)["default"];exports["default"]=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),_Object$defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),exports.__esModule=!0},function(module,exports,__webpack_require__){module.exports={"default":__webpack_require__(30),__esModule:!0}},function(module,exports,__webpack_require__){var $=__webpack_require__(6);module.exports=function(it,key,desc){return $.setDesc(it,key,desc)}},function(module,exports){"use strict";exports["default"]=function(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")},exports.__esModule=!0},function(module,exports,__webpack_require__){"use strict";var _get=__webpack_require__(3)["default"],_inherits=__webpack_require__(17)["default"],_createClass=__webpack_require__(28)["default"],_classCallCheck=__webpack_require__(31)["default"];Object.defineProperty(exports,"__esModule",{value:!0});var BaseComponent=function(_React$Component){function BaseComponent(){_classCallCheck(this,BaseComponent),_get(Object.getPrototypeOf(BaseComponent.prototype),"constructor",this).apply(this,arguments)}return _inherits(BaseComponent,_React$Component),_createClass(BaseComponent,[{key:"_bind",value:function(){for(var _this=this,_len=arguments.length,methods=Array(_len),_key=0;_len>_key;_key++)methods[_key]=arguments[_key];methods.forEach(function(method){return _this[method]=_this[method].bind(_this)})}}]),BaseComponent}(React.Component);exports["default"]=BaseComponent,module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";var _get=__webpack_require__(3)["default"],_inherits=__webpack_require__(17)["default"],_createClass=__webpack_require__(28)["default"],_classCallCheck=__webpack_require__(31)["default"],_interopRequireDefault=__webpack_require__(1)["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _baseComponentJsBaseComponent=__webpack_require__(32),_baseComponentJsBaseComponent2=_interopRequireDefault(_baseComponentJsBaseComponent),_actionInputActions=__webpack_require__(34),_actionInputActions2=_interopRequireDefault(_actionInputActions),_actionInputStore=__webpack_require__(35),ActionInput=(_interopRequireDefault(_actionInputStore),function(_BaseComponent){function ActionInput(){_classCallCheck(this,ActionInput),_get(Object.getPrototypeOf(ActionInput.prototype),"constructor",this).call(this),this._bind("handleChange","handleSubmit"),this.state={value:""}}return _inherits(ActionInput,_BaseComponent),_createClass(ActionInput,[{key:"handleChange",value:function(event){this.setState({value:event.target.value}),_actionInputActions2["default"].inputChanged({value:this.state.value,callback:this.props.onChangeCallback})}},{key:"handleSubmit",value:function(event){13===event.keyCode&&(_actionInputActions2["default"].inputSubmited({value:this.state.value,callback:this.props.onSubmitCallback}),this.setState({value:""}))}},{key:"render",value:function(){return React.createElement("div",null,React.createElement("input",{type:"text",value:this.state.value,onChange:this.handleChange,onKeyDown:this.handleSubmit}))}}]),ActionInput}(_baseComponentJsBaseComponent2["default"]));exports["default"]=ActionInput,module.exports=exports["default"]},function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var ActionInputActions=Reflux.createActions(["inputChanged","inputSubmited"]);exports["default"]=ActionInputActions,module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(1)["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _actionInputActions=__webpack_require__(34),_actionInputActions2=_interopRequireDefault(_actionInputActions),ActionInputStore=Reflux.createStore({init:function(){console.log(this,"Store"),this.listenTo(_actionInputActions2["default"].inputChanged,this.onInputChanged),this.listenTo(_actionInputActions2["default"].inputSubmited,this.onInputSubmited)},onInputChanged:function(obj){"function"==typeof callback&&obj.callback(obj.value)},onInputSubmited:function(obj){"function"==typeof obj.callback&&obj.callback(obj.value)}});exports["default"]=ActionInputStore,module.exports=exports["default"]},function(module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var ListActions=Reflux.createActions(["addItem"]);exports["default"]=ListActions,module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";var _interopRequireDefault=__webpack_require__(1)["default"];Object.defineProperty(exports,"__esModule",{value:!0});var _listActions=__webpack_require__(36),_listActions2=_interopRequireDefault(_listActions),ListStore=Reflux.createStore({init:function(){this.listenTo(_listActions2["default"].addItem,this.onAddItem)},getList:function(){return JSON.parse(localStorage.getItem("list"))||[]},saveList:function(arr){return localStorage.setItem("list",JSON.stringify(arr))},onAddItem:function(arr){var list=this.getList();console.log(list),list.push(arr),this.saveList(list),this.trigger(list)}});exports["default"]=ListStore,module.exports=exports["default"]},function(module,exports,__webpack_require__){"use strict";var _get=__webpack_require__(3)["default"],_inherits=__webpack_require__(17)["default"],_createClass=__webpack_require__(28)["default"],_classCallCheck=__webpack_require__(31)["default"];Object.defineProperty(exports,"__esModule",{value:!0});var ListItem=function(_React$Component){function ListItem(){_classCallCheck(this,ListItem),_get(Object.getPrototypeOf(ListItem.prototype),"constructor",this).apply(this,arguments)}return _inherits(ListItem,_React$Component),_createClass(ListItem,[{key:"render",value:function(){return React.createElement("li",null,this.props.content)}}]),ListItem}(React.Component);exports["default"]=ListItem,module.exports=exports["default"]}]);
//# sourceMappingURL=data:application/json;base64,